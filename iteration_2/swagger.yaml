openapi: "3.0.0"
info:
  title: Documentation for the electronic web store - S.B. Telecom
  description: Segment about writing documentation
  version: 1.0.1
  contact:
    email: hsharma@mun.ca
    url: "www.sbtelecom.com"

# servers:
#   - url: "http://localhost:4000/api/v1"
#     description: for localhost -regular
#   - url: "https://localhost:4000/api/v1"
#     description: for localhost -secure

servers:
  - url: "{protocol}://localhost:8000/"
    description: for localhost
    variables:  
      protocol:
        enum:
          - http
          - https
        default: http  

components: 
  securitySchemes:     
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    BearerAuth:
      type: http       
      scheme: bearer
  schemas:
    User:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string  
        email:
          type: string
        phoneNumber:
          type: number
        password:
          type: string

    Product:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        category:
          type: string
        stock:
          type: boolean
        photo:
          type: Buffer
    Category:
      type: object
      properties:
        name:
          type: string

    Order:
      type: object
      properties:
        products:
          type: array
        amount:
          type: number
        address:
          type: string
        status:
          type: ["Cancelled,", "Delivered,", "Shipped,", "Processing,", "Received"]
    
    
security:
  - bearerAuth: [] 
    


paths:
  /api/signUp: 
    post:
      tags:
        - String
      summary: Adds a new user to the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses: 
        200:
          description: "User created successfully"
          content:
            application/json:
              schema: 
                type: string  

  /api/signIn: 
    post:
      tags:
        - String
      summary: SignIn in the website
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      
      responses: 
        200:
          description: "User logged in successfully"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  email:
                    type: string
                  password:
                    type: string   
  /api/signOut: 
    get:
      tags:
        - String
      summary: SignOut the user out of the website
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: email
          required: true
          in: string
        - name: password
          required: true
          in: string
      
      responses: 
        200:
          description: "User logged out successfully"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  email:
                    type: string
                  password:
                    type: string   

  /api/isSignedIn: 
    get:
      tags:
        - String
      summary: Middleware to test if user is signed In or not
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: email
          required: true
          in: string
        - name: password
          required: true
          in: string
      
      
      responses: 
        200:
          description: "User logged out successfully"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  email:
                    type: string
                  password:
                    type: string   

   